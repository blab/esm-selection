from snakemake.utils import Paramspace
import pandas as pd

SEGMENTS = ["pb2", "pb1", "pa", "np", "na", "mp", "ns", "ha"]

paramspace = Paramspace(pd.read_csv("input/params.csv"))
PS_WC = paramspace.wildcard_pattern


rule all:
    input:
        expand(
            "results/max_freqs_log_likelyhood/{ps}/Max_Freq_Fasta_LL_{segment}.csv",
            ps=paramspace.instance_patterns,
            segment=SEGMENTS,
        ),
        expand(
            "results/max_freqs_log_likelyhood_Fine_Tune/{ps}/Max_Freq_Fasta_LL_Fine_Tune_{segment}.csv",
            ps=paramspace.instance_patterns,
            segment=SEGMENTS,
        ),


rule translate_nucleotide_json:
    input:
        json_tree="input/trees/{next_tree}/{segment}.json",
        json_root="input/trees/{next_tree}/{segment}_root-sequence.json",
        script="scripts/translate_nucleotide_to_protein.py",
    output:
        "results/root_tree_translated/{next_tree}/{segment}_root-sequence.json",
    conda:
        "envs/nextstrain_env.yaml"
    container:
        "envs/nextstrain-base.sif"
    shell:
        """
        python {input.script} --tree {input.json_tree} --root {input.json_root} --segment {wildcards.segment} --output {output}
        """


rule extract_node_fastas:
    input:
        json_tree="input/trees/{next_tree}/{segment}.json",
        json_root="results/root_tree_translated/{next_tree}/{segment}_root-sequence.json",
        script="scripts/extract_fasta_nodes.py",
    output:
        "results/node_fastas/{next_tree}/nodeSeqs_{segment}.fasta",
    conda:
        "envs/nextstrain_env.yaml"
    container:
        "envs/nextstrain-base.sif"
    shell:
        """
        python {input.script} --gene {wildcards.segment} --local-files True --tree {input.json_tree} --root {input.json_root} --output {output}
        """


rule extract_max_freq:
    input:
        json_tree="input/trees/{next_tree}/{segment}.json",
        node_fastas="results/node_fastas/{next_tree}/nodeSeqs_{segment}.fasta",
        json_tip_freq="input/trees/{next_tree}/{segment}_tip-frequencies.json",
        script="scripts/extract_max_freq.py",
    output:
        "results/max_freqs/{next_tree}/Max_Freq_Fasta_{segment}.csv",
    conda:
        "envs/nextstrain_env.yaml"
    container:
        "envs/nextstrain-base.sif"
    shell:
        """
        time python {input.script} --segment {wildcards.segment} --tree {input.json_tree} --tip-freq {input.json_tip_freq} --node-fasta {input.node_fastas} --output {output}
        """


rule calc_ll_esm:
    input:
        max_freq="results/max_freqs/{next_tree}/Max_Freq_Fasta_{segment}.csv",
        script="scripts/calc_ll_esm.py",
    output:
        f"results/max_freqs_log_likelyhood/{PS_WC}/Max_Freq_Fasta_LL_{{segment}}.csv",
    shell:
        """
        python {input.script} --max_freq {input.max_freq} --segment {wildcards.segment} --model {wildcards.model} --output {output} 
        """


rule extract_fine_tune_fasta:
    input:
        json_tree="input/trees/{next_tree}/{segment}.json",
        node_fastas="results/node_fastas/{next_tree}/nodeSeqs_{segment}.fasta",
        script="scripts/extract_fine_tune_fasta.py",
        max_freq="results/max_freqs/{next_tree}/Max_Freq_Fasta_{segment}.csv",
    output:
        f"results/fine_tune_fastas/{PS_WC}/fine_tune_fasta_{{segment}}.fasta",
    conda:
        "envs/nextstrain_env.yaml"
    container:
        "envs/nextstrain-base.sif"
    shell:
        """
        python {input.script} --gene {wildcards.segment} --tree {input.json_tree} --node-fasta {input.node_fastas} --max-freq {input.max_freq} --time {wildcards.time} --output {output}
        """


rule generate_fine_tune_model:
    input:
        fine_tune_fasta=f"results/fine_tune_fastas/{PS_WC}/fine_tune_fasta_{{segment}}.fasta",
        script="scripts/make_esm_fine_tune_models.py",
    output:
        f"results/fine_tune_models/{PS_WC}/Fine_Tune_Model_{{segment}}.bin",
    shell:
        """
        python {input.script} --model {wildcards.model} --input {input.fine_tune_fasta} --output {output} --epochs {wildcards.epochs}
        """


rule calc_ll_esm_Fine_tune:
    input:
        max_freq="results/max_freqs/{next_tree}/Max_Freq_Fasta_{segment}.csv",
        script="scripts/calc_ll_esm.py",
        fine_tune_model=f"results/fine_tune_models/{PS_WC}/Fine_Tune_Model_{{segment}}.bin",
    output:
        f"results/max_freqs_log_likelyhood_Fine_Tune/{PS_WC}/Max_Freq_Fasta_LL_Fine_Tune_{{segment}}.csv",
    shell:
        """
        python {input.script} --max_freq {input.max_freq} --segment {wildcards.segment} --model {wildcards.model} --fine_tune_model {input.fine_tune_model} --epochs {wildcards.epochs} --output {output}
        """
